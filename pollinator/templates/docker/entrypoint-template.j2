#!/usr/bin/env bash

TRY_LOOP="20"
set -e

{% if environment.include_aws %}
# Get input params for AWS 
: "${AWS_ACCESS_KEY_ID:="{{ environment.aws_access_key_id }}"}"
: "${AWS_SECRET_ACCESS_KEY:="{{ environment.aws_secret_access_key }}"}"
: "${AWS_REGION:="{{ environment.aws_region }}"}"
: "${AWS_OUTPUT :="{{ environment.aws_output }}"}"
{% endif %}

# Defaults for Airflow Postgres DB
: "${POSTGRES_HOST:="postgres"}"
: "${POSTGRES_PORT:="{{ environment.postgres_port }}"}"
: "${POSTGRES_USER:="{{ environment.postgres_user}}"}"
: "${POSTGRES_PASSWORD:="{{ environment.postgres_password}}"}"
: "${POSTGRES_DB:="airflow"}"


# Defaults for Redis
: "${REDIS_HOST:="redis"}"
: "${REDIS_PORT:="6379"}"
: "${REDIS_PASSWORD:=""}"

if [ -n "$REDIS_PASSWORD" ]; then
    REDIS_PREFIX=:${REDIS_PASSWORD}@
else
    REDIS_PREFIX=
fi

# Defaults and back-compat
: "${AIRFLOW__CORE__FERNET_KEY:=${FERNET_KEY:=$(python -c "from cryptography.fernet import Fernet; FERNET_KEY = Fernet.generate_key().decode(); print(FERNET_KEY)")}}"
: "${AIRFLOW__CORE__EXECUTOR:={{ environment.platform_executor }}"

{% if environment.include_aws %}
# Set up AWS using credentials
aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
aws configure set default.region $AWS_REGION
aws configure set default.output $AWS_OUTPUT
{% endif %}

# Load DAGs exemples (default: Yes)
if [[ -z "$AIRFLOW__CORE__LOAD_EXAMPLES" && "${LOAD_EX:=n}" == n ]]
then
  AIRFLOW__CORE__LOAD_EXAMPLES=False
fi


wait_for_port() {
  local name="$1" host="$2" port="$3"
  local j=0
  while ! nc -z "$host" "$port" >/dev/null 2>&1 < /dev/null; do
    j=$((j+1))
    if [ $j -ge $TRY_LOOP ]; then
      echo >&2 "$(date) - $host:$port still not reachable, giving up"
      exit 1
    fi
    echo "$(date) - waiting for $name... $j/$TRY_LOOP"
    sleep 5
  done
}

if [ "$AIRFLOW__CORE__EXECUTOR" != "SequentialExecutor" ]; then
  AIRFLOW__CORE__SQL_ALCHEMY_CONN="postgresql+psycopg2://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB"
  AIRFLOW__CELERY__RESULT_BACKEND="db+postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB"
  wait_for_port "Postgres" "$POSTGRES_HOST" "$POSTGRES_PORT"
fi

if [ "$AIRFLOW__CORE__EXECUTOR" = "CeleryExecutor" ]; then
  AIRFLOW__CELERY__BROKER_URL="redis://$REDIS_PREFIX$REDIS_HOST:$REDIS_PORT/1"
  wait_for_port "Redis" "$REDIS_HOST" "$REDIS_PORT"
fi

export \
  AIRFLOW__CELERY__BROKER_URL \
  AIRFLOW__CELERY__CELERY_RESULT_BACKEND \
  AIRFLOW__CORE__EXECUTOR \
  AIRFLOW__CORE__FERNET_KEY \
  AIRFLOW__CORE__LOAD_EXAMPLES \
  AIRFLOW__CORE__SQL_ALCHEMY_CONN \
{% if environment.include_aws %}  
  AWS_ACCESS_KEY_ID \
  AWS_SECRET_ACCESS_KEY \
  AWS_REGION \
  AWS_OUTPUT 
{% endif %}

{% if environment.include_authorized_users %}
add_airflow_users() {
  {% for user in environment.user_accounts %}
  airflow create_user -r {{user.role}} -f {{user.firstname}} -l {{user.lastname}} -e {{user.email}} -p {{user.password}}
  {% endfor %}
}
{% endif %}
case "$1" in
  webserver)
    nohup airflow initdb &>/dev/null  &
    {% if environment.include_authorized_users %}
    sleep 1m
    add_airflow_users
    {%  endif  %}
    if [ "$AIRFLOW__CORE__EXECUTOR" = "LocalExecutor" ]; then
      # With the "Local" executor it should all run in one container.
      airflow scheduler &
    fi
    exec airflow webserver
    ;;
  worker|scheduler)
    # To give the webserver time to run initdb.
    sleep 10
    exec airflow "$@"
    ;;
  flower)
    sleep 10
    exec airflow "$@"
    ;;
  version)
    exec airflow "$@"
    ;;
  *)
    # The command is something like bash, not an airflow subcommand. Just run it in the right environment.
    exec "$@"
    ;;
esac